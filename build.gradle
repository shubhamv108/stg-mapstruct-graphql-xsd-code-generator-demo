import io.github.kobylynskyi.graphql.codegen.gradle.GraphQLCodegenGradleTask

import java.lang.reflect.Method

plugins {
    id "java"
    id "idea"
    id "application"
    id "io.github.kobylynskyi.graphql.codegen" version "5.10.0"
}

group 'code.shubham'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    jaxb
}

/**
 * Generate requests and model from external service
 */
compileJava.dependsOn "graphqlCodegenClient"
sourceSets.main.java.srcDir "$buildDir/generated-client-graphql"
tasks.register('graphqlCodegenClient', GraphQLCodegenGradleTask) {
    graphqlSchemas.includePattern = "schema\\.graphqls"
    outputDir = new File("$buildDir/generated-client-graphql")
    modelPackageName = "code.shubham.client.graphql.models"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    generateApis = false
    generateClient = true
    generateBuilder = true
    generateToString = true
    generateParameterizedFieldsResolvers = false
}

/**
 * Generate apis and model
 */
compileJava.dependsOn "graphqlCodegenSources"
sourceSets.main.java.srcDir "$buildDir/generated-sources-graphql"
tasks.register('graphqlCodegenSources', GraphQLCodegenGradleTask) {
    graphqlSchemas.includePattern = "schema\\.graphqls"
    outputDir = new File("$buildDir/generated-sources-graphql")
    apiPackageName = "code.shubham.graphql.apis"
    modelPackageName = "code.shubham.graphql.models"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
}

compileJava.dependsOn 'genJaxb'
sourceSets.main.java.srcDir "$buildDir/generated-sources-xsd"
tasks.register('genJaxb') {
    ext.sourcesDir = "${buildDir}/generated-sources-xsd/jaxb/code/shubham/xml/models"
    ext.classesDir = "${buildDir}/classes/jaxb"
    outputs.dir classesDir

    doLast() {
        project.ant {
            // Create output directories
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath

            xjc(destdir: sourcesDir) {
                schema(dir: "${projectDir}/src/main/resources", includes: '**/*.xsd')
                arg(value: "-extension")
                produces(dir: sourcesDir, includes: '**/*.java')
            }

            javac(destdir: classesDir, source: 21, target: 21, debug: true,
                    debugLevel: 'lines,vars,source',
                    includeantruntime: false,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: '**/*.java')
                include(name: '*.java')
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: '**/*.java')
                }
            }
        }
    }
}
jar {
    from genJaxb.classesDir
}

//compileJava.dependsOn 'generateMappers'
//tasks.register('generateMappers') {
//    doLast {
//        URL[] urls = sourceSets.main.runtimeClasspath.files as URL[]
//        def classloader = new URLClassLoader(urls, null)
//        Class myClass = classloader.load("code.shubham.codegen.STGCodeGenerator")
//        def myInstance = myClass.newInstance()
//        Method method = myClass.getMethod("execute")
//        method.invoke(myInstance)
//    }
//}

//ext {
//    javaMainClass = "code.shubham.codegen.STGCodeGenerator"
//}
//compileJava.dependsOn 'compileSTG'
//tasks.register('compileSTG', Exec) {
//    dependsOn build
//    group = "Execution"
//    description = "Run the main class with ExecTask"
//    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), javaMainClass
//}

dependencies {
    // jaxb
    compileOnly(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb 'com.sun.xml.bind:jaxb-xjc:4.0.5'
    jaxb "com.migesok:jaxb-java-time-adapters:1.1.3"
    implementation 'joda-time:joda-time:2.12.7'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'


    // graphql codegen
    implementation "com.graphql-java:graphql-java-extended-scalars:20.2"
    implementation "io.github.kobylynskyi:graphql-java-codegen:5.10.0"
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    // mapstruct
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

    compileOnly "org.projectlombok:lombok:1.18.32"
    annotationProcessor "org.projectlombok:lombok:1.18.32"


    // string template
    implementation 'org.antlr:ST4:4.3.4'


    // testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.2"
}
